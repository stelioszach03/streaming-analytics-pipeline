version: '3.8'

services:
  # ===== Infrastructure Services =====
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: echo srvr | nc zookeeper 2181 || exit 1
      interval: 10s
      retries: 3
      start_period: 10s
      timeout: 10s

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test: kafka-topics --bootstrap-server kafka:9093 --list || exit 1
      interval: 10s
      retries: 3
      start_period: 10s
      timeout: 10s

  kafka-setup:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka-setup
    depends_on:
      - kafka
    command: >
      bash -c "
        echo 'Waiting for Kafka to be available...'
        sleep 20
        echo 'Creating Kafka topics...'
        kafka-topics --bootstrap-server kafka:9093 --create --if-not-exists --topic metrics-data --partitions 3 --replication-factor 1
        kafka-topics --bootstrap-server kafka:9093 --create --if-not-exists --topic processed-metrics --partitions 3 --replication-factor 1
        kafka-topics --bootstrap-server kafka:9093 --create --if-not-exists --topic alerts --partitions 3 --replication-factor 1
        kafka-topics --bootstrap-server kafka:9093 --create --if-not-exists --topic service-health --partitions 3 --replication-factor 1
        echo 'Topics created.'
      "

  cassandra:
    image: cassandra:4.1
    container_name: cassandra
    ports:
      - "9042:9042"
    environment:
      MAX_HEAP_SIZE: 256M
      HEAP_NEWSIZE: 128M
      CASSANDRA_CLUSTER_NAME: MetricsCluster
    volumes:
      - ./storage/cassandra/schema/schema.cql:/schema.cql
    healthcheck:
      test: cqlsh -e "describe keyspaces" || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  cassandra-setup:
    image: cassandra:4.1
    container_name: cassandra-setup
    depends_on:
      - cassandra
    command: >
      bash -c "
        echo 'Waiting for Cassandra to be ready...'
        sleep 60
        echo 'Initializing schema...'
        cqlsh cassandra -f /schema.cql
        echo 'Schema initialized.'
      "
    volumes:
      - ./storage/cassandra/schema/schema.cql:/schema.cql

  # ===== Application Services =====
  kafka-producer:
    build:
      context: ./ingestion/producer
    container_name: kafka-producer
    depends_on:
      - kafka
      - kafka-setup
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      KAFKA_TOPIC: metrics-data

  kafka-consumer:
    build:
      context: ./ingestion/consumer
    container_name: kafka-consumer
    depends_on:
      - kafka
      - kafka-setup
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9093
      KAFKA_TOPIC: metrics-data
      KAFKA_GROUP_ID: metrics-consumer-group

  # ===== API Gateway =====
  api-gateway:
    build:
      context: ./api-gateway
    container_name: api-gateway
    ports:
      - "8080:8080"
    environment:
      PORT: 8080
      KAFKA_BOOTSTRAP_SERVERS: kafka:9093
    depends_on:
      - kafka
      - kafka-setup
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8080/actuator/health || exit 1
      interval: 20s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ===== Frontend Service =====
  frontend:
    build:
      context: ./frontend
    container_name: frontend
    ports:
      - "80:80"
    environment:
      REACT_APP_WEBSOCKET_URL: ws://api-gateway:8080/ws
    depends_on:
      - api-gateway
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost/health || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s